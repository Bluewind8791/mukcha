spring:

  profiles:
    group:
      set1: set1
      set2: set2

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql-test.c8odve5cbglu.ap-northeast-2.rds.amazonaws.com:3306/mukcha?sessionVariables=sql_mode='NO_ENGINE_SUBSTITUTION'&jdbcCompliantTruncation=false
    username: ${{ secrets.MYSQL_USERNAME }}
    password: ${{ secrets.MYSQL_PASSWORD }}

  jpa:
    open-in-view: false # Explicitly configure spring.jpa.open-in-view to disable this warning
    generate-ddl: false # 구현체와 상관없이 자동화된 ddl 을 설정하는 값
    hibernate:
      ddl-auto: update
    show_sql: false
    properties:
      hibernate:
        format_sql: true # 실행쿼리를 가독성있게 표현

  thymeleaf:
    prefix: classpath:templates/
    suffix: .html
    check-template-location: true
    mode: HTML

  devtools:
    livereload:
      enabled: true
    restart:
      enabled: true
    add-properties: false # DevToolsPropertyDefaultsPostProcessor 

  output:
    ansi:
      enabled: always # console color

  mvc:
    hiddenmethod:
      filter:
        enabled: true # for using PUT, DELETE mapping

  security:
    oauth2:
      client:
        registration:
          # google oauth2
          google:
            client-id: ${{ secret.GOOGLE_CLIENT_ID }}
            client-secret: ${{ secret.GOOGLE_CLIENT_SECRET }}
            scope: profile, email
          # naver registration
          naver:
            client-id: ${{ secret.NAVER_CLIENT_ID }}
            client-secret: ${{ secret.NAVER_CLIENT_SECRET }}
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}" # (== http://localhost:8080/login/oauth2/code/naver)
            authorization-grant-type: authorization_code
            client-name: Naver
            scope: name,email,profile_image
        provider:
          # naver provider
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# SERVER
server:
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# AWS S3
cloud:
  aws:
    credentials:
      accessKey: ${{ secret.S3_ACCESS_KEY }}
      secretKey: ${{S3_SECRET_KEY}}
    s3:
      bucket: mukcha-bucket
    region:
      static: ap-northeast-2
    stack:
      auto: false