# workflow의 이름
name: github-actions

# 해당 workflow가 언제 실행될 것인지에 대한 트리거를 지정
on:
  # main branch에 대한 push 나 pull request 이벤트를 트리거로 지정
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # 수동으로 해당 workflow 실행 지정
  workflow_dispatch:

# 현재 스크립트에서 사용할 환경변수를 정의하여 사용
env:
  S3_BUCKET_NAME: bluewind-bucket
  AWS_REGION: ap-northeast-2
  CODEDEPLOY_NAME: springboot-webservice
  CODEDEPLOY_GROUP: springboot-webservice-group

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Grant execute permission for decrypt_secret.sh
        run: chmod +x ./scripts/decrypt_secret.sh
        shell: bash

      - name: Decrypt Secret
        run: ./scripts/decrypt_secret.sh
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      # - name: Test printing your secret (Remove this step in production)
      #   run: cat ./src/main/resources/my_secret.json

      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Setup MySQL for test
        uses: samin/mysql-action@v1
        with:
          mysql database: 'test'
          mysql root password: ${{ secrets.RootPassword }} # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: 'developer' # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Of course you can use secrets, too
          mysql password: ${{ secrets.DatabasePassword }} # Required if "mysql user" exists. The password for the "mysql user"

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
      # - name: Build with Gradle
      #   run: ./gradlew build -x test
      #   shell: bash

      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ${{ env.AWS_REGION }} ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/mukcha.zip

      - name: Code Deploy
        run: |
          aws deploy create-deployment \
          --application-name $CODEDEPLOY_NAME \
          --deployment-config-name \
          CodeDeployDefault.AllAtOnce \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=mukcha.zip